version: '3'

networks:
  web:
    external: true

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

services:
  django:{% if cookiecutter.use_celery == 'y' %} &django{% endif %}
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: {{ cookiecutter.project_slug }}_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: {{ cookiecutter.project_slug }}_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.production/.postgres

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: {{ cookiecutter.project_slug }}_production_traefik
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme:z
    ports:
      - ":80"
      - ":443"
    external_links:
      - traefik
    networks:
      - default
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}.rule=HostRegexp(`{{ cookiecutter.project_slug }}.{domain:[a-z]+}.{tld:[a-z]+}`, `{host:[a-z]+}.{{ cookiecutter.project_slug }}.{domain:[a-z]+}.{tld:[a-z]+}`)"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}.priority=100"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}.entrypoints=web,websecure"
      - "traefik.http.services.{{ cookiecutter.project_slug }}.loadbalancer.server.port=443"
      - "traefik.http.services.{{ cookiecutter.project_slug }}.loadbalancer.server.scheme=https"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}.tls=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}.tls.certresolver=dnsresolver"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}.tls.domains[0].main={{ cookiecutter.project_slug }}.{{ cookiecutter.domain_name }}"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}.tls.domains[0].sans=*.{{ cookiecutter.project_slug }}.{{ cookiecutter.domain_name }}"
      - "traefik.http.middlewares.test-compress.compress=true"

  redis:
    image: redis:6
  {%- if cookiecutter.use_celery == 'y' %}

  celeryworker:
    <<: *django
    image: {{ cookiecutter.project_slug }}_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: {{ cookiecutter.project_slug }}_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: {{ cookiecutter.project_slug }}_production_flower
    command: /start-flower
  {%- endif %}
  {%- if cookiecutter.cloud_provider == 'AWS' %}

  awscli:
    build:
      context: .
      dockerfile: ./compose/production/aws/Dockerfile
    env_file:
      - ./.envs/.production/.django
    volumes:
      - production_postgres_data_backups:/backups:z
  {%- endif %}
